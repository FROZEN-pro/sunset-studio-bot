const config = require('../config');

class Keyboards {
    // Asosiy menyu keyboard
    static getMainMenu() {
        return {
            keyboard: [
                [config.BUTTONS.TRENDING, config.BUTTONS.SEARCH],
                [config.BUTTONS.ANIME, config.BUTTONS.MOVIES],
                [config.BUTTONS.PROFILE, config.BUTTONS.SETTINGS]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        };
    }

    // Admin menyu keyboard
    static getAdminMenu() {
        return {
            keyboard: [
                [config.BUTTONS.TRENDING, config.BUTTONS.SEARCH],
                [config.BUTTONS.ANIME, config.BUTTONS.MOVIES],
                [config.BUTTONS.ADMIN, config.BUTTONS.PROFILE],
                [config.BUTTONS.SETTINGS]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        };
    }

    // Orqaga qaytish keyboard
    static getBackKeyboard() {
        return {
            keyboard: [
                [config.BUTTONS.BACK, config.BUTTONS.HOME]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        };
    }

    // Content sahifalash inline keyboard
    static getPaginationKeyboard(currentPage, totalPages, type = 'content') {
        const keyboard = [];
        
        // Navigation buttons
        const navButtons = [];
        if (currentPage > 1) {
            navButtons.push({
                text: '⬅️ Oldingi',
                callback_data: `${type}_page_${currentPage - 1}`
            });
        }
        
        navButtons.push({
            text: `${currentPage}/${totalPages}`,
            callback_data: 'current_page'
        });
        
        if (currentPage < totalPages) {
            navButtons.push({
                text: 'Keyingi ➡️',
                callback_data: `${type}_page_${currentPage + 1}`
            });
        }
        
        if (navButtons.length > 0) {
            keyboard.push(navButtons);
        }
        
        // Back button
        keyboard.push([{
            text: '🏠 Bosh Menyu',
            callback_data: 'main_menu'
        }]);
        
        return { inline_keyboard: keyboard };
    }

    // Content detail inline keyboard
    static getContentKeyboard(contentId, hasEpisodes = false) {
        const keyboard = [
            [{
                text: '▶️ Tomosha Qilish',
                callback_data: `watch_${contentId}`
            }]
        ];

        if (hasEpisodes) {
            keyboard[0].push({
                text: '📺 Epizodlar',
                callback_data: `episodes_${contentId}`
            });
        }

        keyboard.push([
            {
                text: '❤️ Sevimli',
                callback_data: `favorite_${contentId}`
            },
            {
                text: '📤 Ulashish',
                callback_data: `share_${contentId}`
            }
        ]);

        keyboard.push([{
            text: '🏠 Bosh Menyu',
            callback_data: 'main_menu'
        }]);

        return { inline_keyboard: keyboard };
    }

    // Episodes keyboard
    static getEpisodesKeyboard(episodes, contentId, page = 1, limit = 10) {
        const keyboard = [];
        const startIndex = (page - 1) * limit;
        const endIndex = Math.min(startIndex + limit, episodes.length);
        
        // Episode buttons (2 per row)
        for (let i = startIndex; i < endIndex; i += 2) {
            const row = [];
            
            row.push({
                text: `📺 ${episodes[i].ep}-qism`,
                callback_data: `watch_episode_${contentId}_${episodes[i].ep}`
            });
            
            if (i + 1 < endIndex) {
                row.push({
                    text: `📺 ${episodes[i + 1].ep}-qism`,
                    callback_data: `watch_episode_${contentId}_${episodes[i + 1].ep}`
                });
            }
            
            keyboard.push(row);
        }
        
        // Pagination for episodes
        if (episodes.length > limit) {
            const totalPages = Math.ceil(episodes.length / limit);
            const navButtons = [];
            
            if (page > 1) {
                navButtons.push({
                    text: '⬅️',
                    callback_data: `episodes_${contentId}_page_${page - 1}`
                });
            }
            
            navButtons.push({
                text: `${page}/${totalPages}`,
                callback_data: 'current_episodes_page'
            });
            
            if (page < totalPages) {
                navButtons.push({
                    text: '➡️',
                    callback_data: `episodes_${contentId}_page_${page + 1}`
                });
            }
            
            keyboard.push(navButtons);
        }
        
        // Back buttons
        keyboard.push([
            {
                text: '🔙 Content',
                callback_data: `content_${contentId}`
            },
            {
                text: '🏠 Bosh Menyu',
                callback_data: 'main_menu'
            }
        ]);
        
        return { inline_keyboard: keyboard };
    }

    // Genre selection keyboard
    static getGenreKeyboard(genres) {
        const keyboard = [];
        
        // Genres (2 per row)
        for (let i = 0; i < genres.length; i += 2) {
            const row = [];
            
            row.push({
                text: `${config.BUTTONS.ANIME} ${genres[i].name}`,
                callback_data: `genre_${genres[i].id}`
            });
            
            if (i + 1 < genres.length) {
                row.push({
                    text: `${config.BUTTONS.MOVIES} ${genres[i + 1].name}`,
                    callback_data: `genre_${genres[i + 1].id}`
                });
            }
            
            keyboard.push(row);
        }
        
        keyboard.push([{
            text: '🏠 Bosh Menyu',
            callback_data: 'main_menu'
        }]);
        
        return { inline_keyboard: keyboard };
    }

    // Search results keyboard
    static getSearchResultsKeyboard(results, query, page = 1) {
        const keyboard = [];
        const itemsPerPage = 5;
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, results.length);
        
        // Search results
        for (let i = startIndex; i < endIndex; i++) {
            const content = results[i];
            keyboard.push([{
                text: `${config.Helpers.addEmoji(content.type)} ${content.title}`,
                callback_data: `content_${content.id}`
            }]);
        }
        
        // Pagination
        if (results.length > itemsPerPage) {
            const totalPages = Math.ceil(results.length / itemsPerPage);
            const navButtons = [];
            
            if (page > 1) {
                navButtons.push({
                    text: '⬅️ Oldingi',
                    callback_data: `search_${query}_page_${page - 1}`
                });
            }
            
            navButtons.push({
                text: `${page}/${totalPages}`,
                callback_data: 'current_search_page'
            });
            
            if (page < totalPages) {
                navButtons.push({
                    text: 'Keyingi ➡️',
                    callback_data: `search_${query}_page_${page + 1}`
                });
            }
            
            if (navButtons.length > 0) {
                keyboard.push(navButtons);
            }
        }
        
        keyboard.push([{
            text: '🏠 Bosh Menyu',
            callback_data: 'main_menu'
        }]);
        
        return { inline_keyboard: keyboard };
    }

    // Admin panel keyboard
    static getAdminKeyboard() {
        return {
            keyboard: [
                ['📊 Statistika', '➕ Kontent Qo\'shish'],
                ['📝 Kontent Boshqarish', '👥 Foydalanuvchilar'],
                ['⚙️ Sozlamalar', '📢 E\'lonlar'],
                ['🏠 Bosh Menyu']
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        };
    }

    // Admin content management
    static getContentManagementKeyboard(contentId) {
        return {
            inline_keyboard: [
                [
                    { text: '✏️ Tahrirlash', callback_data: `admin_edit_${contentId}` },
                    { text: '🗑 O\'chirish', callback_data: `admin_delete_${contentId}` }
                ],
                [
                    { text: '📺 Ko\'rish', callback_data: `content_${contentId}` },
                    { text: '🔙 Orqaga', callback_data: 'admin_content_list' }
                ]
            ]
        };
    }

    // Confirmation keyboard
    static getConfirmationKeyboard(action, targetId) {
        return {
            inline_keyboard: [
                [
                    { text: '✅ Ha', callback_data: `confirm_${action}_${targetId}` },
                    { text: '❌ Yo\'q', callback_data: 'cancel_action' }
                ]
            ]
        };
    }

    // Profile keyboard
    static getProfileKeyboard() {
        return {
            inline_keyboard: [
                [
                    { text: '❤️ Sevimlilar', callback_data: 'user_favorites' },
                    { text: '📊 Statistikam', callback_data: 'user_stats' }
                ],
                [
                    { text: '🏠 Bosh Menyu', callback_data: 'main_menu' }
                ]
            ]
        };
    }

    // Settings keyboard
    static getSettingsKeyboard() {
        return {
            inline_keyboard: [
                [
                    { text: '🔔 Bildirishnomalar', callback_data: 'settings_notifications' },
                    { text: '🌐 Til', callback_data: 'settings_language' }
                ],
                [
                    { text: '📱 Bot haqida', callback_data: 'about_bot' },
                    { text: '💬 Yordam', callback_data: 'help' }
                ],
                [
                    { text: '🏠 Bosh Menyu', callback_data: 'main_menu' }
                ]
            ]
        };
    }

    // Cancel keyboard (for inputs)
    static getCancelKeyboard() {
        return {
            keyboard: [
                ['❌ Bekor Qilish']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        };
    }

    // Remove keyboard
    static getRemoveKeyboard() {
        return {
            remove_keyboard: true
        };
    }
}

module.exports = Keyboards;