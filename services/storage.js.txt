const axios = require('axios');
const FormData = require('form-data');
const config = require('../config');

class StorageService {
    constructor() {
        this.imgbbApiKey = config.IMGBB_API_KEY;
    }

    async uploadImage(imageBuffer, filename) {
        try {
            const form = new FormData();
            form.append('image', imageBuffer, filename);

            const response = await axios.post(`https://api.imgbb.com/1/upload?key=${this.imgbbApiKey}`, form, {
                headers: {
                    ...form.getHeaders(),
                    'Content-Type': 'multipart/form-data'
                },
                timeout: 30000
            });

            if (response.data.success) {
                return {
                    success: true,
                    url: response.data.data.url,
                    display_url: response.data.data.display_url,
                    delete_url: response.data.data.delete_url,
                    size: response.data.data.size
                };
            } else {
                throw new Error('Upload failed: ' + response.data.error?.message);
            }

        } catch (error) {
            console.error('Image upload xatosi:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async uploadImageFromUrl(imageUrl, filename = null) {
        try {
            // Download image first
            const imageResponse = await axios.get(imageUrl, { 
                responseType: 'arraybuffer',
                timeout: 30000 
            });
            
            const buffer = Buffer.from(imageResponse.data);
            const finalFilename = filename || `image_${Date.now()}.jpg`;

            return await this.uploadImage(buffer, finalFilename);

        } catch (error) {
            console.error('Upload from URL xatosi:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async deleteImage(deleteUrl) {
        try {
            await axios.get(deleteUrl);
            return { success: true };
        } catch (error) {
            console.error('Delete image xatosi:', error);
            return { success: false, error: error.message };
        }
    }

    validateImageUrl(url) {
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
        const urlLower = url.toLowerCase();
        return imageExtensions.some(ext => urlLower.includes(ext));
    }

    async getImageInfo(url) {
        try {
            const response = await axios.head(url);
            return {
                success: true,
                size: parseInt(response.headers['content-length']) || 0,
                type: response.headers['content-type'] || 'unknown',
                lastModified: response.headers['last-modified']
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
}

module.exports = new StorageService();